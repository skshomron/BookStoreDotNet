//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleAppBookFair
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BookFairEntities : DbContext
    {
        public BookFairEntities()
            : base("name=BookFairEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BF_Books> Books { get; set; }
        public virtual DbSet<BF_Users> Users { get; set; }
    
        public virtual int InsertBook(string title, Nullable<short> publishYear, string iSBN, Nullable<int> price, Nullable<System.Guid> idUser, string cover, Nullable<byte> state, Nullable<byte> status)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var publishYearParameter = publishYear.HasValue ?
                new ObjectParameter("PublishYear", publishYear) :
                new ObjectParameter("PublishYear", typeof(short));
    
            var iSBNParameter = iSBN != null ?
                new ObjectParameter("ISBN", iSBN) :
                new ObjectParameter("ISBN", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(System.Guid));
    
            var coverParameter = cover != null ?
                new ObjectParameter("Cover", cover) :
                new ObjectParameter("Cover", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(byte));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBook", titleParameter, publishYearParameter, iSBNParameter, priceParameter, idUserParameter, coverParameter, stateParameter, statusParameter);
        }
    
        public virtual int InsertUser(string firstName, string lastName, string email, Nullable<bool> isMale, Nullable<System.DateTime> birthday, string login, string password, string avatar, string phone, Nullable<bool> hasReadTermsConditions)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isMaleParameter = isMale.HasValue ?
                new ObjectParameter("IsMale", isMale) :
                new ObjectParameter("IsMale", typeof(bool));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("Avatar", avatar) :
                new ObjectParameter("Avatar", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var hasReadTermsConditionsParameter = hasReadTermsConditions.HasValue ?
                new ObjectParameter("HasReadTermsConditions", hasReadTermsConditions) :
                new ObjectParameter("HasReadTermsConditions", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", firstNameParameter, lastNameParameter, emailParameter, isMaleParameter, birthdayParameter, loginParameter, passwordParameter, avatarParameter, phoneParameter, hasReadTermsConditionsParameter);
        }
    }
}
